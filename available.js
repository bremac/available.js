// Generated by CoffeeScript 1.6.3
(function() {
  var Available, DEFAULT_DAYS, DEFAULT_HOURS, ESCAPE_KEYCODE, twelveHourTime, _i, _results;

  DEFAULT_DAYS = [
    {
      name: "Sun",
      dayId: 0
    }, {
      name: "Mon",
      dayId: 1
    }, {
      name: "Tue",
      dayId: 2
    }, {
      name: "Wed",
      dayId: 3
    }, {
      name: "Thu",
      dayId: 4
    }, {
      name: "Fri",
      dayId: 5
    }, {
      name: "Sat",
      dayId: 6
    }
  ];

  DEFAULT_HOURS = (function() {
    _results = [];
    for (_i = 0; _i <= 23; _i++){ _results.push(_i); }
    return _results;
  }).apply(this);

  ESCAPE_KEYCODE = 27;

  twelveHourTime = function(hour) {
    if (hour % 12 === 0) {
      return "12:00";
    } else {
      return "" + (hour % 12) + ":00";
    }
  };

  Available = (function() {
    function Available(options) {
      var $parent;
      $parent = options.$parent, this.days = options.days, this.hours = options.hours, this.onChanged = options.onChanged;
      if (this.days == null) {
        this.days = DEFAULT_DAYS;
      }
      if (this.hours == null) {
        this.hours = DEFAULT_HOURS;
      }
      if (this.onChanged == null) {
        this.onChanged = null;
      }
      this.cells = {};
      this.activeCell = null;
      this.$el = $('<table class="available"></table>');
      this.addHeader(this.$el);
      this.addBody(this.$el);
      this.addFooter(this.$el);
      this.bindEvents();
      $parent.append(this.$el);
    }

    Available.prototype.addHeader = function($el) {
      var $tr, name, _j, _len, _ref;
      $tr = $("<tr><th></th></tr>").appendTo($el);
      _ref = this.days;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        name = _ref[_j].name;
        $("<th>" + name + "</td>").appendTo($tr);
      }
      return null;
    };

    Available.prototype.addBody = function($el) {
      var $td, $tr, column, dayId, startHour, _base, _j, _k, _len, _len1, _ref, _ref1;
      _ref = this.hours;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        startHour = _ref[_j];
        $tr = $("<tr></tr>").appendTo($el);
        if (startHour === 11) {
          $tr.addClass("pre-noon");
        }
        if (startHour === 12) {
          $tr.addClass("post-noon");
        }
        $("<td><span>" + (twelveHourTime(startHour)) + "</span></td>").appendTo($tr);
        _ref1 = this.days;
        for (column = _k = 0, _len1 = _ref1.length; _k < _len1; column = ++_k) {
          dayId = _ref1[column].dayId;
          $td = $("<td></td>");
          $td.addClass("day-" + dayId + " hour-" + startHour);
          $td.appendTo($tr);
          if ((_base = this.cells)[column] == null) {
            _base[column] = {};
          }
          this.cells[column][startHour] = {
            $el: $td,
            column: column,
            startHour: startHour,
            isActive: false
          };
        }
      }
      return null;
    };

    Available.prototype.addFooter = function($el) {
      var $tr, endHour;
      endHour = this.hours[this.hours.length - 1] + 1;
      $tr = $('<tr class="trailing-row"></tr>').appendTo($el);
      $("<td><span>" + (twelveHourTime(endHour)) + "</span></td>").appendTo($tr);
      return null;
    };

    Available.prototype.bindEvents = function() {
      var cell, column, _, _fn, _ref,
        _this = this;
      $(document).mouseup(function(e) {
        if (_this.activeCell !== null) {
          _this.clearTentative();
          return _this.activeCell = null;
        }
      });
      $(document).keydown(function(e) {
        if (e.keyCode === ESCAPE_KEYCODE && _this.activeCell !== null) {
          _this.clearTentative();
          return _this.activeCell = null;
        }
      });
      _ref = this.cells;
      for (_ in _ref) {
        column = _ref[_];
        _fn = function(cell) {
          cell.$el.mousedown(function(e) {
            _this.activeCell = cell;
            return e.originalEvent.preventDefault();
          });
          cell.$el.mouseup(function(e) {
            if (_this.activeCell !== null) {
              _this.clearTentative();
              _this.toggleCells(_this.activeCell, cell);
              _this.activeCell = null;
              return false;
            }
          });
          return cell.$el.mousemove(function(e) {
            if (_this.activeCell !== null) {
              return _this.toggleCellsTentative(_this.activeCell, cell);
            }
          });
        };
        for (_ in column) {
          cell = column[_];
          _fn(cell);
        }
      }
      return null;
    };

    Available.prototype.forCells = function(fromCell, toCell, fxn) {
      var column, startHour, _j, _k, _ref, _ref1, _ref2, _ref3;
      for (column = _j = _ref = fromCell.column, _ref1 = toCell.column; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; column = _ref <= _ref1 ? ++_j : --_j) {
        for (startHour = _k = _ref2 = fromCell.startHour, _ref3 = toCell.startHour; _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; startHour = _ref2 <= _ref3 ? ++_k : --_k) {
          fxn(this.cells[column][startHour]);
        }
      }
      return null;
    };

    Available.prototype.clearTentative = function() {
      this.$el.find('.tentative-interval').removeClass('tentative-interval');
      return null;
    };

    Available.prototype.clearActive = function() {
      var cell, column, _, _ref;
      this.$el.find('.available-interval').removeClass('available-interval');
      _ref = this.cells;
      for (_ in _ref) {
        column = _ref[_];
        for (_ in column) {
          cell = column[_];
          cell.isActive = false;
        }
      }
      return null;
    };

    Available.prototype.markActive = function(cell, isNowActive) {
      cell.isActive = isNowActive;
      cell.$el.toggleClass('available-interval', isNowActive);
      return null;
    };

    Available.prototype.toggleCells = function(fromCell, toCell) {
      var isNowActive,
        _this = this;
      isNowActive = !fromCell.isActive;
      this.forCells(fromCell, toCell, function(cell) {
        return _this.markActive(cell, isNowActive);
      });
      this.triggerChanged();
      return null;
    };

    Available.prototype.toggleCellsTentative = function(fromCell, toCell) {
      var isNowActive;
      this.clearTentative();
      isNowActive = !fromCell.isActive;
      this.forCells(fromCell, toCell, function(cell) {
        return cell.$el.addClass('tentative-interval');
      });
      return null;
    };

    Available.prototype.triggerChanged = function() {
      var availableIntervals;
      if (this.onChanged === null) {
        return;
      }
      availableIntervals = this.serialize();
      this.onChanged(availableIntervals);
      return null;
    };

    Available.prototype.serialize = function() {
      var availableIntervals, cell, column, dayId, lastInterval, startHour, _j, _k, _len, _len1, _ref, _ref1;
      availableIntervals = [];
      _ref = this.days;
      for (column = _j = 0, _len = _ref.length; _j < _len; column = ++_j) {
        dayId = _ref[column].dayId;
        lastInterval = null;
        _ref1 = this.hours;
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          startHour = _ref1[_k];
          cell = this.cells[column][startHour];
          if (lastInterval === null && cell.isActive) {
            lastInterval = {
              dayId: dayId,
              startHour: startHour,
              endHour: startHour + 1
            };
          } else if (lastInterval !== null && cell.isActive) {
            lastInterval.endHour += 1;
          } else if (lastInterval !== null && !cell.isActive) {
            availableIntervals.push(lastInterval);
            lastInterval = null;
          }
        }
        if (lastInterval !== null) {
          availableIntervals.push(lastInterval);
        }
      }
      return availableIntervals;
    };

    Available.prototype.deserialize = function(availableIntervals) {
      var cell, column, columnForDayId, dayId, endHour, hour, startHour, _j, _k, _l, _len, _len1, _ref, _ref1;
      this.clearTentative();
      this.clearActive();
      columnForDayId = {};
      _ref = this.days;
      for (column = _j = 0, _len = _ref.length; _j < _len; column = ++_j) {
        dayId = _ref[column].dayId;
        columnForDayId[dayId] = column;
      }
      for (_k = 0, _len1 = availableIntervals.length; _k < _len1; _k++) {
        _ref1 = availableIntervals[_k], dayId = _ref1.dayId, startHour = _ref1.startHour, endHour = _ref1.endHour;
        column = columnForDayId[dayId];
        for (hour = _l = startHour; startHour <= endHour ? _l < endHour : _l > endHour; hour = startHour <= endHour ? ++_l : --_l) {
          cell = this.cells[column][hour];
          this.markActive(cell, true);
        }
      }
      return null;
    };

    return Available;

  })();

  window.Available = Available;

}).call(this);

/*
//@ sourceMappingURL=available.map
*/
